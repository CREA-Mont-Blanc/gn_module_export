swagger: "2.0"
info:
  version: "1.0.0"
  title: "Exports de JDD concernant la biodiversité"
  description: "Export de vos jeux de données GéoNature aux formats geojson, csv et shapefile"
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: https://github.com/PnX-SI/GeoNature/issues
    email: geonature@ecrins-parcnational.fr
  license:
    name: GNU General Public License v3.0
    url: https://raw.githubusercontent.com/PnX-SI/GeoNature/master/LICENSE
externalDocs:
  description: "Find out more about GéoNature"
  url: "http://geonature.fr"
servers:
  # FIXME: API_ENDPOINT + api_url
  - url: http://{api_endpoint}/{api_url}/
    description: Development server
    variables:
      api_endpoint: localhost:8000
      api_url: exports
  # - url: http://{api_endpoint}/{api_url}/
  #   description: Demo server
  #   variables:
  #     api_endpoint: demo.geonature.fr/geonature/api
  #     api_url: exports
schemes:
  - "http"
# securityDefinitions:
#   # Bearer:
#   #   name: token
#   #   type: apiKey
#   #   scheme: bearer
#   #   bearerFormat: JWT
#   #   in: header
#   #   description: |
#   #    For accessing the API a valid JWT token must be passed in all the queries in
#   #    the 'Authorization' header.
#   #
#   #
#   #    A valid JWT token is generated by the API and returned as answer of a call
#   #    to the route /login given a valid user & password.
#   #
#   #
#   #    The following syntax must be used in the 'Authorization' header :
#   #
#   #     Bearer xxxxxx.yyyyyyy.zzzzzz
#   # FIXME: M2M login
#   geonature_auth:
#     type: apiKey
#     in: header
#     name: username-localhost-8888
#     tokenUrl: "http://localhost:4200/#/login"
#   cookie_xsrf:
#     type: apiKey
#     name: token
#     in: cookie
security:
  - bearerAuth: []
  # - geonature_auth: []
  # - cookie_xsrf: []
produces:
  - "application/json"
consumes:
  - "application/json"
components:
schemas:
  Export:
    type: object
    properties:
      id:
        type: integer
        minimum: 1
      label:
        type: string
      schema_name:
        type: string
      view_name:
        type: string
    required:
      - id
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  # FIXME: api_url
  /exports/:
    get:
      description: Returns all exports from the system that the user has access to
      responses:
        '200':
          description: A list of exports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/export'
        '404':
          description: "No configured exports"
        '400':
          description: "Unexpected usage"
        '403':
          description: "Unauthenticated"
  /exports/{id}/{format}:
    get:
      description: Returns the format-specified data from the export the user has access to
      parameters:
        - name: id
          in: path
          description: The export ID
          required: true
          type: integer
        - name: format
          in: path
          description: |
            The data format:
              - json: w/o geographic information
              - csv: w/o geographic information
              - shp: with geographic information
          enum:
            - json
            - csv
            - shp
          required: true
          type: string
      responses:
        '200':
          description: A file
          content:
            'application/json': {}
            'text/csv': {}
            'application/zip': {}
        '404':
          description: "No configured export | Empty dataset"
        '400':
          description: "Unexpected usage"
        '403':
          description: "Unauthenticated | Insufficient rights"
